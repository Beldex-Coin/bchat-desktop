import React from 'react';
import _ from 'lodash';
import styled from 'styled-components';
import { contextMenu } from 'react-contexify';
import { BchatIcon } from './BchatIcon';

type SProps = {
  onArrowClick: (e: React.MouseEvent<HTMLDivElement>) => void;
  onMainButtonClick: (e: React.MouseEvent<HTMLDivElement>) => void;
  isMuted?: boolean;
  hidePopoverArrow?: boolean;
  iconType: 'microphone' | 'camera' | 'volume';
  isSelected?: boolean;
};

const StyledRoundedButton = styled.div<{ isMuted: boolean; isSelected?: boolean }>`
  // background-color:var(--color-clickable-hovered);
  color: ${props => (props.isSelected ? '#FF3E3E' : '#128b17')};
  border-radius: 50%;
  cursor: pointer;
  border:1px solid #e6e6e6
  transition-duration: 0.25s;
  border:var(--bchat-border);
  background-color: ${props =>
    props.isSelected ? 'var(--color-call-option-btn-hover)' : 'var(--color-clickable-hovered)'};
  &:hover {
    background-color: var(--color-call-option-btn-hover);
  }

  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
`;

const StyledContainer = styled(StyledRoundedButton)`
  width: 60px;
  height: 60px;
  margin: 10px;
  opacity: 1;
  &:hover {
    tranform: scale(1.1);
  }
`;

const StyledMainIcon = styled.div<{ fill?: string }>`
  // padding: 20px;
  color: ;
  color: ${props => props.fill};
  svg {
    fill: ${props => props.fill};
  }
`;

const StyledArrowIcon = styled(StyledRoundedButton)`
  width: 35%;
  height: 35%;
  // position: relative;
  top: 39px;
  right: 0px;
  border: 2px solid var(--color-hop-bg);

  position: absolute;
  &:hover {
    background-color: #ffffff;
    color: #2879f9;
  }
`;

const CameraIcon = (
  <svg xmlns="http://www.w3.org/2000/svg" width="27" height="27" viewBox="0 0 26 26">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M2.91699 8.43913C2.91699 6.76846 3.20432 5.89496 3.69399 5.40529C4.18365 4.91563 5.05716 4.6283 6.72783 4.6283H13.5745C15.2452 4.6283 16.1187 4.91563 16.6083 5.40529C17.098 5.89496 17.3853 6.76846 17.3853 8.43913V9.54768C17.385 9.55732 17.3848 9.56699 17.3848 9.57669V16.4125C17.3848 16.4222 17.385 16.4319 17.3853 16.4415V17.5608C17.3853 19.23 17.0958 20.104 16.6048 20.5941C16.1134 21.0846 15.239 21.3716 13.5745 21.3716H6.72783C5.19575 21.3716 4.28416 20.8713 3.73975 20.2182C3.17527 19.541 2.91699 18.5929 2.91699 17.5608V8.43913ZM18.8826 17.8532C18.8513 19.4715 18.5481 20.7738 17.6644 21.6558C16.7285 22.5899 15.3225 22.8716 13.5745 22.8716H6.72783C4.83656 22.8716 3.46774 22.2345 2.58757 21.1786C1.72746 20.1468 1.41699 18.8145 1.41699 17.5608V8.43913C1.41699 6.68646 1.69841 5.27955 2.63333 4.34463C3.56825 3.40971 4.97516 3.1283 6.72783 3.1283H13.5745C15.3272 3.1283 16.7341 3.40971 17.669 4.34463C18.5494 5.22505 18.8503 6.52404 18.8824 8.13617L20.7157 6.85018L20.7169 6.84934C21.5645 6.25731 22.5478 5.99965 23.3894 6.43917C24.2309 6.87861 24.5831 7.83347 24.5831 8.87252V17.1275C24.5831 18.1659 24.2312 19.1223 23.388 19.5603C22.5446 19.9984 21.5612 19.7355 20.7149 19.1384L20.7139 19.1377L18.8826 17.8532ZM18.8853 16.0229L21.5771 17.911L21.5789 17.9123C22.2058 18.3548 22.5652 18.2973 22.6965 18.2291C22.8283 18.1607 23.0831 17.8983 23.0831 17.1275V8.87252C23.0831 8.1024 22.8286 7.83851 22.6951 7.76879C22.5618 7.69916 22.2019 7.64194 21.5765 8.07865L18.8853 9.96633V16.0229ZM12.458 9.41663C11.9748 9.41663 11.583 9.80838 11.583 10.2916C11.583 10.7749 11.9748 11.1666 12.458 11.1666C12.9413 11.1666 13.333 10.7749 13.333 10.2916C13.333 9.80838 12.9413 9.41663 12.458 9.41663ZM10.083 10.2916C10.083 8.97995 11.1463 7.91663 12.458 7.91663C13.7697 7.91663 14.833 8.97995 14.833 10.2916C14.833 11.6033 13.7697 12.6666 12.458 12.6666C11.1463 12.6666 10.083 11.6033 10.083 10.2916Z"
    />
  </svg>
);

const SpeakerIcon = (
  <svg xmlns="http://www.w3.org/2000/svg" width="27" height="27" viewBox="0 0 27 27">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M16.0839 4.86708C17.3197 5.54668 17.9419 6.98576 17.9419 8.75259V18.6976C17.9419 20.46 17.3191 21.8979 16.0847 22.5786C14.8513 23.2587 13.2993 23.0218 11.799 22.0856C11.7989 22.0856 11.799 22.0856 11.799 22.0856L8.62899 20.1083C8.38793 19.9674 8.11858 19.8918 7.86385 19.8918H6.30736C5.10418 19.8918 4.06386 19.592 3.32925 18.8608C2.594 18.129 2.29199 17.0916 2.29199 15.8918V11.5584C2.29199 10.3586 2.594 9.32114 3.32926 8.58934C4.06386 7.85819 5.10418 7.55842 6.30736 7.55842H7.86385C8.11859 7.55842 8.38794 7.48273 8.62901 7.34187L11.7988 5.36465C11.7988 5.36467 11.7989 5.36462 11.7988 5.36465C13.298 4.42916 14.85 4.18847 16.0839 4.86708ZM15.3611 6.18143C14.7828 5.86339 13.8367 5.86108 12.593 6.6372L9.40692 8.62453L9.39918 8.6291C8.94542 8.89725 8.41209 9.05842 7.86385 9.05842H6.30736C5.33362 9.05842 4.74126 9.30032 4.38741 9.6525C4.03421 10.004 3.79199 10.5916 3.79199 11.5584V15.8918C3.79199 16.8586 4.03421 17.4461 4.38741 17.7977C4.74126 18.1499 5.33362 18.3918 6.30736 18.3918H7.86385C8.41208 18.3918 8.94542 18.5529 9.39918 18.8211L9.40692 18.8256L12.5928 20.8129C13.8354 21.5883 14.7814 21.5843 15.3603 21.2651C15.9382 20.9465 16.4419 20.1527 16.4419 18.6976V8.75259C16.4419 7.29108 15.9376 6.49849 15.3611 6.18143ZM21.9975 6.08463C22.3282 5.83521 22.7985 5.90111 23.0479 6.23181C26.3952 10.67 26.3952 16.7802 23.0479 21.2184C22.7985 21.5491 22.3282 21.615 21.9975 21.3655C21.6668 21.1161 21.6009 20.6459 21.8503 20.3151C24.7944 16.4116 24.7944 11.0385 21.8503 7.13503C21.6009 6.80433 21.6668 6.33405 21.9975 6.08463ZM20.0055 8.79308C20.3361 8.54358 20.8064 8.60935 21.0559 8.93999C23.1952 11.7749 23.1952 15.6753 21.0559 18.5102C20.8064 18.8408 20.3361 18.9066 20.0055 18.6571C19.6749 18.4076 19.6091 17.9373 19.8586 17.6067C21.5943 15.3065 21.5943 12.1436 19.8586 9.84352C19.6091 9.51288 19.6749 9.04258 20.0055 8.79308Z"
    />
  </svg>
);

const MicrophoneIcon = (
  <svg xmlns="http://www.w3.org/2000/svg" width="27" height="27" viewBox="0 0 27 27">
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M5.44629 11.7042C5.8605 11.7042 6.19629 12.04 6.19629 12.4542V14.2959C6.19629 15.3433 6.40344 16.3272 6.78681 17.2315C6.94847 17.6129 6.77037 18.0531 6.38901 18.2147C6.00765 18.3764 5.56744 18.1983 5.40577 17.8169C4.94414 16.728 4.69629 15.5451 4.69629 14.2959V12.4542C4.69629 12.04 5.03208 11.7042 5.44629 11.7042ZM13.7337 3.41663C10.9253 3.41663 8.65039 5.69158 8.65039 8.49996V13.9166C8.65039 14.3308 8.98618 14.6666 9.40039 14.6666C9.8146 14.6666 10.1504 14.3308 10.1504 13.9166V8.49996C10.1504 7.1901 10.8521 6.04506 11.9004 5.42003V8.5C11.9004 8.91421 12.2362 9.25 12.6504 9.25C13.0646 9.25 13.4004 8.91421 13.4004 8.5V5.25C13.4004 5.13896 13.3763 5.03356 13.333 4.93876C13.4645 4.92413 13.5982 4.91663 13.7337 4.91663C15.7137 4.91663 17.3171 6.52001 17.3171 8.49996V8.82496C17.3171 8.92909 17.3383 9.02827 17.3766 9.1184L4.46072 22.0423C4.16791 22.3353 4.16806 22.8102 4.46105 23.103C4.75403 23.3958 5.2289 23.3956 5.52171 23.1027L7.64244 20.9806C9.07778 22.2822 10.9311 23.1346 12.9834 23.3028V25.8334C12.9834 26.2476 13.3192 26.5834 13.7334 26.5834C14.1476 26.5834 14.4834 26.2476 14.4834 25.8334V23.3026C19.1192 22.9204 22.7706 19.0291 22.7706 14.2959V12.4542C22.7706 12.04 22.4348 11.7042 22.0206 11.7042C21.6064 11.7042 21.2706 12.04 21.2706 12.4542V14.2959C21.2706 18.4517 17.8932 21.8308 13.738 21.8334L13.7334 21.8334L13.7308 21.8334C11.7975 21.8328 10.0418 21.1082 8.70427 19.9181L10.3591 18.2622C11.258 19.0631 12.4445 19.5416 13.733 19.5416C16.5414 19.5416 18.8164 17.2667 18.8164 14.4583V13.9166C18.8164 13.5024 18.4806 13.1666 18.0664 13.1666C17.6522 13.1666 17.3164 13.5024 17.3164 13.9166V14.4583C17.3164 16.4382 15.713 18.0416 13.733 18.0416C12.8525 18.0416 12.0443 17.7268 11.4219 17.1988L23.0067 5.60683C23.2995 5.31384 23.2994 4.83897 23.0064 4.54617C22.7134 4.25336 22.2385 4.25351 21.9457 4.54649L18.7598 7.73435C18.3908 5.28948 16.2819 3.41663 13.7337 3.41663Z"
    />
  </svg>
);

export const DropDownAndToggleButton = (props: SProps) => {
  const { iconType, hidePopoverArrow, onArrowClick, onMainButtonClick, isMuted } = props;
  const arrowClickHandler = (e: React.MouseEvent<HTMLDivElement>) => {
    e.stopPropagation();
    onArrowClick(e);
  };

  const mainButtonClickHandler = (e: React.MouseEvent<HTMLDivElement>) => {
    e.stopPropagation();
    contextMenu.hideAll();
    onMainButtonClick(e);
  };
  const iconToRender =
    iconType === 'microphone' ? MicrophoneIcon : iconType === 'camera' ? CameraIcon : SpeakerIcon;
  const fillColor = props.isSelected
    ? iconType === 'camera'
      ? '#00BD40'
      : '#FF3E3E'
    : 'var(--color-text)';
  return (
    <StyledContainer
      isMuted={isMuted || false}
      isSelected={props.isSelected}
      onClick={mainButtonClickHandler}
    >
      <StyledMainIcon fill={fillColor}>{iconToRender}</StyledMainIcon>
      {!hidePopoverArrow && (
        <StyledArrowIcon isMuted={isMuted || false} onClick={arrowClickHandler}>
          <BchatIcon iconType="chevron" iconColor="#00BD40" iconSize={20} />
        </StyledArrowIcon>
      )}
    </StyledContainer>
  );
};
